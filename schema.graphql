schema {
  query: RootQuery
}

"""Field references one or more document in another dataset"""
directive @crossDatasetReference(
  """Dataset name"""
  dataset: String!

  """Strings of the target types names enabled for this reference"""
  typeNames: [String!]!
) on FIELD_DEFINITION | OBJECT

"""Field is a "raw" JSON alias for a different field"""
directive @jsonAlias(
  """Source field name"""
  for: String!
) on FIELD_DEFINITION

"""Field references one or more documents"""
directive @reference on FIELD_DEFINITION

type Article implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  author: String
  header: Image
  media: [Graphic]
  paragraphRaw: JSON
  published: DateTime
  slug: Slug
  tags: [Tag]
  title: String
}

input ArticleFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  author: StringFilter
  header: ImageFilter
  published: DatetimeFilter
  slug: SlugFilter
  title: StringFilter
}

input ArticleSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  author: SortOrder
  header: ImageSorting
  published: SortOrder
  slug: SlugSorting
  title: SortOrder
}

type Block {
  _key: String
  _type: String
  children: [Span]
  level: Float
  listItem: String
  style: String
}

union BlockOrGraphic = Block | Graphic

input BooleanFilter {
  """Checks if the value is equal to the given input."""
  eq: Boolean

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is not equal to the given input."""
  neq: Boolean
}

type Carousel implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  media: [Graphic]
  slug: String
  title: String
}

input CarouselFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  slug: StringFilter
  title: StringFilter
}

input CarouselSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  slug: SortOrder
  title: SortOrder
}

type CrossDatasetReference {
  _dataset: String
  _key: String
  _projectId: String
  _ref: String
  _type: String
  _weak: Boolean
}

input CrossDatasetReferenceFilter {
  _dataset: StringFilter
  _key: StringFilter
  _projectId: StringFilter
  _ref: StringFilter
  _type: StringFilter
  _weak: BooleanFilter
}

input CrossDatasetReferenceSorting {
  _dataset: SortOrder
  _key: SortOrder
  _projectId: SortOrder
  _ref: SortOrder
  _type: SortOrder
  _weak: SortOrder
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilter {
  """Checks if the value is equal to the given input."""
  eq: Date

  """Checks if the value is greater than the given input."""
  gt: Date

  """Checks if the value is greater than or equal to the given input."""
  gte: Date

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: Date

  """Checks if the value is lesser than or equal to the given input."""
  lte: Date

  """Checks if the value is not equal to the given input."""
  neq: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DatetimeFilter {
  """Checks if the value is equal to the given input."""
  eq: DateTime

  """Checks if the value is greater than the given input."""
  gt: DateTime

  """Checks if the value is greater than or equal to the given input."""
  gte: DateTime

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: DateTime

  """Checks if the value is lesser than or equal to the given input."""
  lte: DateTime

  """Checks if the value is not equal to the given input."""
  neq: DateTime
}

type Details {
  _key: String
  _type: String
  client: String
  date: Date
  project: String
  projectType: String
}

input DetailsFilter {
  _key: StringFilter
  _type: StringFilter
  client: StringFilter
  date: DateFilter
  project: StringFilter
  projectType: StringFilter
}

input DetailsSorting {
  _key: SortOrder
  _type: SortOrder
  client: SortOrder
  date: SortOrder
  project: SortOrder
  projectType: SortOrder
}

"""A Sanity document"""
interface Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
}

input DocumentFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
}

input DocumentSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
}

type File {
  _key: String
  _type: String
  asset: SanityFileAsset
}

input FileFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityFileAssetFilter
}

input FileSorting {
  _key: SortOrder
  _type: SortOrder
}

input FloatFilter {
  """Checks if the value is equal to the given input."""
  eq: Float

  """Checks if the value is greater than the given input."""
  gt: Float

  """Checks if the value is greater than or equal to the given input."""
  gte: Float

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: Float

  """Checks if the value is lesser than or equal to the given input."""
  lte: Float

  """Checks if the value is not equal to the given input."""
  neq: Float
}

type Geopoint {
  _key: String
  _type: String
  alt: Float
  lat: Float
  lng: Float
}

input GeopointFilter {
  _key: StringFilter
  _type: StringFilter
  alt: FloatFilter
  lat: FloatFilter
  lng: FloatFilter
}

input GeopointSorting {
  _key: SortOrder
  _type: SortOrder
  alt: SortOrder
  lat: SortOrder
  lng: SortOrder
}

type Graphic implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  client: String
  content: File
  contentUrl: String
  dateCreated: Date
  description: String
  link: String
  projectType: String
  title: String
  type: String
}

input GraphicFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  client: StringFilter
  content: FileFilter
  contentUrl: StringFilter
  dateCreated: DateFilter
  description: StringFilter
  link: StringFilter
  projectType: StringFilter
  title: StringFilter
  type: StringFilter
}

input GraphicSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  client: SortOrder
  content: FileSorting
  contentUrl: SortOrder
  dateCreated: SortOrder
  description: SortOrder
  link: SortOrder
  projectType: SortOrder
  title: SortOrder
  type: SortOrder
}

input IDFilter {
  """Checks if the value is equal to the given input."""
  eq: ID
  in: [ID!]

  """Checks if the value matches the given word/words."""
  matches: ID

  """Checks if the value is not equal to the given input."""
  neq: ID
  nin: [ID!]
}

type Image {
  _key: String
  _type: String
  asset: SanityImageAsset
  crop: SanityImageCrop
  hotspot: SanityImageHotspot
}

input ImageFilter {
  _key: StringFilter
  _type: StringFilter
  asset: SanityImageAssetFilter
  crop: SanityImageCropFilter
  hotspot: SanityImageHotspotFilter
}

input ImageSorting {
  _key: SortOrder
  _type: SortOrder
  crop: SanityImageCropSorting
  hotspot: SanityImageHotspotSorting
}

input IntFilter {
  """Checks if the value is equal to the given input."""
  eq: Int

  """Checks if the value is greater than the given input."""
  gt: Int

  """Checks if the value is greater than or equal to the given input."""
  gte: Int

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value is lesser than the given input."""
  lt: Int

  """Checks if the value is lesser than or equal to the given input."""
  lte: Int

  """Checks if the value is not equal to the given input."""
  neq: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Links {
  _key: String
  _type: String
  icon: String
  title: String
  url: String
}

input LinksFilter {
  _key: StringFilter
  _type: StringFilter
  icon: StringFilter
  title: StringFilter
  url: StringFilter
}

input LinksSorting {
  _key: SortOrder
  _type: SortOrder
  icon: SortOrder
  title: SortOrder
  url: SortOrder
}

type Portfolio implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  banner: Image
  details: Details
  hero: Graphic
  media: Graphic
  mockup: Graphic
  slug: Slug
  tags: [Tag]
  title: String
  variants: [Graphic]
}

input PortfolioFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  banner: ImageFilter
  details: DetailsFilter
  hero: GraphicFilter
  media: GraphicFilter
  mockup: GraphicFilter
  slug: SlugFilter
  title: StringFilter
}

input PortfolioSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  banner: ImageSorting
  details: DetailsSorting
  slug: SlugSorting
  title: SortOrder
}

type Project implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  details: Details
  hero: Graphic
  links: [Links]
  mockup: Graphic
  paragraph: String
  slug: Slug
  stack: [String]
  tags: [Tag]
  title: String
}

input ProjectFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  details: DetailsFilter
  hero: GraphicFilter
  mockup: GraphicFilter
  paragraph: StringFilter
  slug: SlugFilter
  title: StringFilter
}

input ProjectSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  details: DetailsSorting
  paragraph: SortOrder
  slug: SlugSorting
  title: SortOrder
}

type RootQuery {
  Article(
    """Article document ID"""
    id: ID!
  ): Article
  Carousel(
    """Carousel document ID"""
    id: ID!
  ): Carousel
  Document(
    """Document document ID"""
    id: ID!
  ): Document
  Graphic(
    """Graphic document ID"""
    id: ID!
  ): Graphic
  Portfolio(
    """Portfolio document ID"""
    id: ID!
  ): Portfolio
  Project(
    """Project document ID"""
    id: ID!
  ): Project
  SanityFileAsset(
    """SanityFileAsset document ID"""
    id: ID!
  ): SanityFileAsset
  SanityImageAsset(
    """SanityImageAsset document ID"""
    id: ID!
  ): SanityImageAsset
  Tag(
    """Tag document ID"""
    id: ID!
  ): Tag
  allArticle(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [ArticleSorting!]
    where: ArticleFilter
  ): [Article!]!
  allCarousel(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [CarouselSorting!]
    where: CarouselFilter
  ): [Carousel!]!
  allDocument(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [DocumentSorting!]
    where: DocumentFilter
  ): [Document!]!
  allGraphic(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [GraphicSorting!]
    where: GraphicFilter
  ): [Graphic!]!
  allPortfolio(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [PortfolioSorting!]
    where: PortfolioFilter
  ): [Portfolio!]!
  allProject(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [ProjectSorting!]
    where: ProjectFilter
  ): [Project!]!
  allSanityFileAsset(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [SanityFileAssetSorting!]
    where: SanityFileAssetFilter
  ): [SanityFileAsset!]!
  allSanityImageAsset(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [SanityImageAssetSorting!]
    where: SanityImageAssetFilter
  ): [SanityImageAsset!]!
  allTag(
    """Max documents to return"""
    limit: Int

    """Offset at which to start returning documents from"""
    offset: Int
    sort: [TagSorting!]
    where: TagFilter
  ): [Tag!]!
}

type SanityAssetSourceData {
  _key: String
  _type: String

  """
  The unique ID for the asset within the originating source so you can programatically find back to it
  """
  id: String

  """A canonical name for the source this asset is originating from"""
  name: String

  """
  A URL to find more information about this asset in the originating source
  """
  url: String
}

input SanityAssetSourceDataFilter {
  _key: StringFilter
  _type: StringFilter
  id: StringFilter
  name: StringFilter
  url: StringFilter
}

input SanityAssetSourceDataSorting {
  _key: SortOrder
  _type: SortOrder
  id: SortOrder
  name: SortOrder
  url: SortOrder
}

type SanityFileAsset implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  altText: String
  assetId: String
  description: String
  extension: String
  label: String
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  uploadId: String
  url: String
}

input SanityFileAssetFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  altText: StringFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  uploadId: StringFilter
  url: StringFilter
}

input SanityFileAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  altText: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  uploadId: SortOrder
  url: SortOrder
}

type SanityImageAsset implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  altText: String
  assetId: String
  description: String
  extension: String
  label: String
  metadata: SanityImageMetadata
  mimeType: String
  originalFilename: String
  path: String
  sha1hash: String
  size: Float
  source: SanityAssetSourceData
  title: String
  uploadId: String
  url: String
}

input SanityImageAssetFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  altText: StringFilter
  assetId: StringFilter
  description: StringFilter
  extension: StringFilter
  label: StringFilter
  metadata: SanityImageMetadataFilter
  mimeType: StringFilter
  originalFilename: StringFilter
  path: StringFilter
  sha1hash: StringFilter
  size: FloatFilter
  source: SanityAssetSourceDataFilter
  title: StringFilter
  uploadId: StringFilter
  url: StringFilter
}

input SanityImageAssetSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  altText: SortOrder
  assetId: SortOrder
  description: SortOrder
  extension: SortOrder
  label: SortOrder
  metadata: SanityImageMetadataSorting
  mimeType: SortOrder
  originalFilename: SortOrder
  path: SortOrder
  sha1hash: SortOrder
  size: SortOrder
  source: SanityAssetSourceDataSorting
  title: SortOrder
  uploadId: SortOrder
  url: SortOrder
}

type SanityImageCrop {
  _key: String
  _type: String
  bottom: Float
  left: Float
  right: Float
  top: Float
}

input SanityImageCropFilter {
  _key: StringFilter
  _type: StringFilter
  bottom: FloatFilter
  left: FloatFilter
  right: FloatFilter
  top: FloatFilter
}

input SanityImageCropSorting {
  _key: SortOrder
  _type: SortOrder
  bottom: SortOrder
  left: SortOrder
  right: SortOrder
  top: SortOrder
}

type SanityImageDimensions {
  _key: String
  _type: String
  aspectRatio: Float
  height: Float
  width: Float
}

input SanityImageDimensionsFilter {
  _key: StringFilter
  _type: StringFilter
  aspectRatio: FloatFilter
  height: FloatFilter
  width: FloatFilter
}

input SanityImageDimensionsSorting {
  _key: SortOrder
  _type: SortOrder
  aspectRatio: SortOrder
  height: SortOrder
  width: SortOrder
}

type SanityImageHotspot {
  _key: String
  _type: String
  height: Float
  width: Float
  x: Float
  y: Float
}

input SanityImageHotspotFilter {
  _key: StringFilter
  _type: StringFilter
  height: FloatFilter
  width: FloatFilter
  x: FloatFilter
  y: FloatFilter
}

input SanityImageHotspotSorting {
  _key: SortOrder
  _type: SortOrder
  height: SortOrder
  width: SortOrder
  x: SortOrder
  y: SortOrder
}

type SanityImageMetadata {
  _key: String
  _type: String
  blurHash: String
  dimensions: SanityImageDimensions
  hasAlpha: Boolean
  isOpaque: Boolean
  location: Geopoint
  lqip: String
  palette: SanityImagePalette
}

input SanityImageMetadataFilter {
  _key: StringFilter
  _type: StringFilter
  blurHash: StringFilter
  dimensions: SanityImageDimensionsFilter
  hasAlpha: BooleanFilter
  isOpaque: BooleanFilter
  location: GeopointFilter
  lqip: StringFilter
  palette: SanityImagePaletteFilter
}

input SanityImageMetadataSorting {
  _key: SortOrder
  _type: SortOrder
  blurHash: SortOrder
  dimensions: SanityImageDimensionsSorting
  hasAlpha: SortOrder
  isOpaque: SortOrder
  location: GeopointSorting
  lqip: SortOrder
  palette: SanityImagePaletteSorting
}

type SanityImagePalette {
  _key: String
  _type: String
  darkMuted: SanityImagePaletteSwatch
  darkVibrant: SanityImagePaletteSwatch
  dominant: SanityImagePaletteSwatch
  lightMuted: SanityImagePaletteSwatch
  lightVibrant: SanityImagePaletteSwatch
  muted: SanityImagePaletteSwatch
  vibrant: SanityImagePaletteSwatch
}

input SanityImagePaletteFilter {
  _key: StringFilter
  _type: StringFilter
  darkMuted: SanityImagePaletteSwatchFilter
  darkVibrant: SanityImagePaletteSwatchFilter
  dominant: SanityImagePaletteSwatchFilter
  lightMuted: SanityImagePaletteSwatchFilter
  lightVibrant: SanityImagePaletteSwatchFilter
  muted: SanityImagePaletteSwatchFilter
  vibrant: SanityImagePaletteSwatchFilter
}

input SanityImagePaletteSorting {
  _key: SortOrder
  _type: SortOrder
  darkMuted: SanityImagePaletteSwatchSorting
  darkVibrant: SanityImagePaletteSwatchSorting
  dominant: SanityImagePaletteSwatchSorting
  lightMuted: SanityImagePaletteSwatchSorting
  lightVibrant: SanityImagePaletteSwatchSorting
  muted: SanityImagePaletteSwatchSorting
  vibrant: SanityImagePaletteSwatchSorting
}

type SanityImagePaletteSwatch {
  _key: String
  _type: String
  background: String
  foreground: String
  population: Float
  title: String
}

input SanityImagePaletteSwatchFilter {
  _key: StringFilter
  _type: StringFilter
  background: StringFilter
  foreground: StringFilter
  population: FloatFilter
  title: StringFilter
}

input SanityImagePaletteSwatchSorting {
  _key: SortOrder
  _type: SortOrder
  background: SortOrder
  foreground: SortOrder
  population: SortOrder
  title: SortOrder
}

input Sanity_DocumentFilter {
  """All documents that are drafts."""
  is_draft: Boolean

  """All documents referencing the given document ID."""
  references: ID
}

type Slug {
  _key: String
  _type: String
  current: String
  source: String
}

input SlugFilter {
  _key: StringFilter
  _type: StringFilter
  current: StringFilter
  source: StringFilter
}

input SlugSorting {
  _key: SortOrder
  _type: SortOrder
  current: SortOrder
  source: SortOrder
}

enum SortOrder {
  """Sorts on the value in ascending order."""
  ASC

  """Sorts on the value in descending order."""
  DESC
}

type Span {
  _key: String
  _type: String
  marks: [String]
  text: String
}

input StringFilter {
  """Checks if the value is equal to the given input."""
  eq: String
  in: [String!]

  """Checks if the value is defined."""
  is_defined: Boolean

  """Checks if the value matches the given word/words."""
  matches: String

  """Checks if the value is not equal to the given input."""
  neq: String
  nin: [String!]
}

type Tag implements Document {
  """Date the document was created"""
  _createdAt: DateTime

  """Document ID"""
  _id: ID
  _key: String

  """Current document revision"""
  _rev: String

  """Document type"""
  _type: String

  """Date the document was last modified"""
  _updatedAt: DateTime
  tagName: String
}

input TagFilter {
  """Apply filters on document level"""
  _: Sanity_DocumentFilter
  _createdAt: DatetimeFilter
  _id: IDFilter
  _key: StringFilter
  _rev: StringFilter
  _type: StringFilter
  _updatedAt: DatetimeFilter
  tagName: StringFilter
}

input TagSorting {
  _createdAt: SortOrder
  _id: SortOrder
  _key: SortOrder
  _rev: SortOrder
  _type: SortOrder
  _updatedAt: SortOrder
  tagName: SortOrder
}
