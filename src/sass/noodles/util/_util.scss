@use "./variables" as *;

*,
*::after,
*::before {
  box-sizing: border-box;
  color: $black;
  margin: 0;
}

body {
  font-family: var(--primary-font);
}

section {
  margin: auto;
  // width: 98vw;
}

ul {
  padding: 0;
  list-style-type: none;
}

a {
  text-decoration: none;
}

hr {
  border: 0;
  border-top: 1px dotted #efefef;
}

img {
  // max-width: 100%;
}

.list {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  height: 100px;
  line-height: 1.5em;
  padding-left: 1.3em;
  // padding-left: 0.3em;
  margin: 0;
  max-width: 22em;

  & li::marker {
    content: "> ";
  }
}

.paragraph {
  margin-top: 0;
  &::first-letter {
    // --webkit-initial-letter: 2;
    // initial-letter: 2;
    font-size: 2em;
    font-weight: bold;
  }
  &::before {
    content: "";
    // border: solid 2px;
    width: 2em;
    background-color: var(--orange);
    display: block;
    height: 2.6em;
    position: absolute;
    z-index: -1;
    transform: translateX(-11px) translateX(0px);
    // animation: blink 1s linear infinite;
  }
}

// generate utility classes
@each $property, $map in $utilities {
  $prefix: map-get($map, "prefix");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if ($k == "default") {
      .#{$prefix} {
        #{$property}: $v;
      }
    } @else {
      .#{$prefix}-#{$k} {
        #{$property}: $v;
      }
    }
  }
}

@mixin xs {
  @media (min-width: map-get($breakpoints, "xs")) {
    @content;
  }
}

@mixin sm {
  @media (min-width: map-get($breakpoints, "sm")) {
    @content;
  }
}

@mixin md {
  @media (min-width: map-get($breakpoints, "md")) {
    @content;
  }
}

@mixin lg {
  @media (min-width: map-get($breakpoints, "lg")) {
    @content;
  }
}

@mixin xl {
  @media (min-width: map-get($breakpoints, "xl")) {
    @content;
  }
}

@mixin breakpoint($bp: 0) {
  @media (min-width: $bp) {
    @content;
  }
}
