@use "sass:list";
@use "./variables" as *;
@use "./fonts" as *;

$variants: 50;

*,
*::after,
*::before {
  box-sizing: border-box;
  color: $black;
  margin: 0;
}

body {
  font-family: $font-primary;
}

section {
  margin: auto;
  // width: 98vw;
}

ul,
ol {
  padding: 0;
  list-style-type: none;
}

ul,
ol,
li {
  list-style: none;
}

a {
  text-decoration: none;
}

hr {
  border: 0;
  border-top: 1px dotted #efefef;
}

img {
  // max-width: 100%;
}

@mixin makeResponsive($prop, $prefix, $variant, $val) {
  // @each $bp, $screenSize in $breakpoints {
  @include sm {
    .#{$prefix}-#{$variant}-sm {
      #{$prop}: $val !important;
    }
    // $res: responsiveUtil()
    // }
  }
  @include md {
    .#{$prefix}-#{$variant}-md {
      #{$prop}: $val !important;
    }
  }

  @include lg {
    .#{$prefix}-#{$variant}-lg {
      #{$prop}: $val !important;
    }
  }

  @include tablet {
    .#{$prefix}-#{$variant}-tablet {
      #{$prop}: $val !important;
    }
  }

  @include hd {
    .#{$prefix}-#{$variant}-hd {
      #{$prop}: $val !important;
    }
  }

  @include uhd {
    .#{$prefix}-#{$variant}-uhd {
      #{$prop}: $val !important;
    }
  }

  @include uuhd {
    .#{$prefix}-#{$variant}-uuhd {
      #{$prop}: $val !important;
    }
  }
}

// generate utility classes
@each $property, $map in $utilities {
  $prefix: map-get($map, "prefix");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if ($k == "default") {
      .#{$prefix} {
        #{$property}: $v;
      }
    } @else {
      @if ($k == "base") {
        @for $variant from 1 through $variants {
          .#{$prefix}-#{$variant} {
            #{$property}: $v * $variant;
          }

          @include makeResponsive($property, $prefix, $variant, $v * $variant);
        }
      } @else {
        .#{$prefix}-#{$k} {
          #{$property}: $v;
        }
      }

      // @debug $v;
      @if (map-has-key($alignment, $property)) {
        @if ($v != 0) {
          .#{$prefix}x-#{$k} {
            #{$property}-left: $v;
            #{$property}-right: $v;
          }

          .#{$prefix}y-#{$k} {
            #{$property}-top: $v;
            #{$property}-bottom: $v;
          }
        }
      }
    }
  }
}

// @function responsiveUtil($prefix, $key, $val, $prop) {
//   @return ("");
//   // @include lg {

//   // .col-#{$i}-lg {
//   //   flex-grow: 0;
//   //   width: math.div($i * 100%, $grid-columns);
//   // }
//   //   }

//   // }
//   // }
// }
// @include md {
// }

// @include lg {
// }

@include tablet {
  .flex-col-tablet {
    flex-direction: column;
  }
}

// @include hd {
// }

// @include uhd {
// }

// @include uuhd {
// }
