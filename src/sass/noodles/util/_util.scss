@use "sass:list";
@use "./variables" as *;
@use "./fonts" as *;

$variants: 35;

*,
*::after,
*::before {
  box-sizing: border-box;
  color: $black;
  margin: 0;
}

body {
  font-family: $font-primary;
}

section {
  margin: auto;
  // width: 98vw;
}

ul,
ol {
  padding: 0;
  list-style-type: none;
}

ul,
ol,
li {
  list-style: none;
}

a {
  text-decoration: none;
}

hr {
  border: 0;
  border-top: 1px dotted #efefef;
}

img {
  // max-width: 100%;
}

@mixin generateBreakpoints($prefix, $variant, $val, $props...) {
  // @each $bp, $screenSize in $breakpoints {
  @include sm {
    .#{$prefix}-#{$variant}-sm {
      @each $prop in $props {
        #{$prop}: $val !important;
      }
    }

    @include md {
      .#{$prefix}-#{$variant}-md {
        @each $prop in $props {
          #{$prop}: $val !important;
        }
      }
    }

    @include lg {
      .#{$prefix}-#{$variant}-lg {
        @each $prop in $props {
          #{$prop}: $val !important;
        }
      }
    }

    @include tablet {
      .#{$prefix}-#{$variant}-tablet {
        @each $prop in $props {
          #{$prop}: $val !important;
        }
      }
    }

    @include hd {
      .#{$prefix}-#{$variant}-hd {
        @each $prop in $props {
          #{$prop}: $val !important;
        }
      }
    }

    @include uhd {
      .#{$prefix}-#{$variant}-uhd {
        @each $prop in $props {
          #{$prop}: $val !important;
        }
      }
    }

    @include uuhd {
      .#{$prefix}-#{$variant}-uuhd {
        @each $prop in $props {
          #{$prop}: $val !important;
        }
      }
    }
  }
}

// generate utility classes
@each $property, $map in $utilities {
  $prefix: map-get($map, "prefix");
  $values: map-get($map, "values");

  @each $k, $v in $values {
    @if ($k == "default") {
      .#{$prefix} {
        #{$property}: $v;
      }
    } @else {
      @if ($k == "base") {
        @for $variant from 1 through $variants {
          .#{$prefix}-#{$variant} {
            #{$property}: $v * $variant;
          }
          @include generateBreakpoints(
            $prefix,
            $variant,
            $v * $variant,
            $property
          );
        }
      } @else {
        .#{$prefix}-#{$k} {
          #{$property}: $v;
        }
        @include generateBreakpoints($prefix, $k, $v, $property);
      }

      @if (map-has-key($alignment, $property)) {
        @if ($v != 0) {
          $base: $v;
          @for $variant from 1 through $variants {
            @if ($k== "base") {
              $t: $variant/100;
              $v: $base * $variant;
            }

            .#{$prefix}x-#{$variant} {
              #{$property}-left: $v;
              #{$property}-right: $v;
            }

            @include generateBreakpoints(
              #{$prefix}x,
              $variant,
              $v,
              #{$property}-left,
              #{$property}-right
            );

            .#{$prefix}y-#{$variant} {
              #{$property}-top: $v;
              #{$property}-bottom: $v;
            }

            @include generateBreakpoints(
              #{$prefix}y,
              $variant,
              $v,
              #{$property}-top,
              #{$property}-bottom
            );
          }
        }
      }
    }
  }
}

// @function responsiveUtil($prefix, $key, $val, $prop) {
//   @return ("");
//   // @include lg {

//   // .col-#{$i}-lg {
//   //   flex-grow: 0;
//   //   width: math.div($i * 100%, $grid-columns);
//   // }
//   //   }

//   // }
//   // }
// }
// @include md {
// }

// @include lg {
// }

// @include tablet {
//   .flex-col-tablet {
//     flex-direction: column;
//   }
//   .flex-row-tablet {
//     flex-direction: column;
//   }
// }

// @include hd {
// }

// @include uhd {
// }

// @include uuhd {
// }
